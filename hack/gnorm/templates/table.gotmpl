// Code generated by gnorm, DO NOT EDIT!


/**
|数据库字段|JSON|说明|
|---|---|---|
{{- range .Table.Columns }}
|{{ .DBName }}|{{camel .DBName}}||
{{- end }}
**/

// ------------------------------
// proto
// ------------------------------

package proto

{{$rootPkg := .Params.RootPkg -}}
{{$table := .Table.DBName -}}
{{$schema := .Table.Schema.DBName -}}

// {{pascal .Table.DBName}}Model represents a row from '{{ $table }}'.
// TODO: 删除本行表示您已确认下方struct已完成
type {{pascal .Table.DBName}}Model struct {
{{- range .Table.Columns }}
	{{specialId .Name }} {{ .Type }} `json:"{{camel .DBName | specialId}}" db:"{{.DBName}}"`  // {{ .DBName }}{{if .IsPrimaryKey}} (PK){{end}}
{{- end }}
}


// ------------------------------
// sdk {{ $table }}
// ------------------------------
package {{ $table }}

{{- $PKFields := join (.Table.PrimaryKeys.Names.Sprintf "input.%s") ", "}}
{{- $PKFieldsParams := join (.Table.PrimaryKeys.DBNames.Sprintf "${%s}") ", "}}
{{- $numPKFields := (len .Table.PrimaryKeys.Names)}}
{{- $inputColumns := .Table.Columns.InputColumns}} 
{{- $inputColumnsParams := join ((walk (walk $inputColumns.DBNames "camel") "specialId").Sprintf "${%s}") ", "}}
{{- $numInputColumns := (len $inputColumns)}}

// {{pascal .Table.DBName}}Input represents an input for '{{ $table }}'.
// TODO: 删除本行表示您已确认下方struct已完成
type {{pascal .Table.DBName}}Input struct {
{{- range $inputColumns}}
	{{specialId .Name }} {{ .Type }} `json:"{{camel .DBName | specialId}}"`
{{- end }}
}

// {{pascal .Table.DBName}}Result represents an output for '{{ $table }}'.
// TODO: 删除本行表示您已确认下方struct已完成
type {{pascal .Table.DBName}}Result struct {
{{- range .Table.Columns }}
	{{specialId .Name }} {{ .Type }} `json:"{{camel .DBName | specialId}}" db:"{{.DBName}}"`  // {{ .DBName }}{{if .IsPrimaryKey}} (PK){{end}}
{{- end }}
}

// List{{pascal .Table.DBName}}Input represents query params for '{{ $table }}'.
// TODO: 删除本行表示您已确认下方struct已完成
type List{{pascal .Table.DBName}}Input struct {
	pagination.ListRequest
	ShowDeleted   bool       `param:"showDeleted"`
}

// TODO: 删除本行表示您已确认下方struct已完成
type List{{pascal .Table.DBName}}Result struct {
	pagination.ListResult
	Result []{{pascal .Table.DBName}}Result `json:"result"`
}

// ------------------------------
// Controller
// ------------------------------
package models

import (
	"context"
	"database/sql"
	"github.com/jmoiron/sqlx"
	"cos-backend-com/src/libs/apierror"
	"cos-backend-com/src/common/dbconn"
	"cos-backend-com/src/common/dbquery
	"cos-backend-com/src/common/flake"
	"cos-backend-com/src/common/util"
)


var {{pascal .Table.DBName}} = &{{camel .Table.DBName}}{
	Connector: defaultConnector,
}

// {{camel .Table.DBName}} represents controller for '{{ $table }}'.
type {{camel .Table.DBName}} struct{
	dbconn.Connector
}


// List {{pascal .Table.DBName}} interface{} by input
// TODO: 删除本行表示您已确认下方func已完成
func(c *{{camel .Table.DBName}})List(ctx context.Context, input *{{ $table }}.List{{pascal .Table.DBName}}Input, outputs interface{})(total int, err error){
	plan := &dbquery.Plan{}
	plan.RetTotal = true

	if !input.ShowDeleted {
		plan.AddCond(`AND t.deleted = false`)
	}
	// TODO

	plan.OrderBySql = ` ORDER BY t.created_at DESC`
	plan.LimitSql = ` LIMIT ${limit} OFFSET ${offset}`

	plan.Params = map[string]interface{}{
		"{offset}":        input.Offset,
		"{limit}":         input.GetLimit(),
	}


	total, err = c.Query(ctx, outputs, plan)
	return
}

// Get {{pascal .Table.DBName}}Model by id
// TODO: 删除本行表示您已确认下方func已完成
func(c *{{camel .Table.DBName}})Get(ctx context.Context, id flake.ID, output interface{})(err error){
	plan := &dbquery.Plan{}
	plan.AddCond(`AND t.id = ${id}`)

	plan.Params = map[string]interface{}{
		"{id}":           id,
	}
	var v struct{ Id flake.ID }
	_, err = c.Query(ctx, &util.PgJsonScanWrapValues{&[]interface{}{&v}, &[]interface{}{output}}, plan)
	if err != nil {
		return
	}
	if v.Id == 0 {
		err = apierror.ErrNotFound
		return
	}
	return
}

// Create {{pascal .Table.DBName}}Model by id
// TODO: 删除本行表示您已确认下方func已完成
func(c *{{camel .Table.DBName}})Create(ctx context.Context, input *{{ $table }}.{{pascal .Table.DBName}}Input, output interface{})error{
	stmt := `
	INSERT INTO {{ $table }} (
		{{ join $inputColumns.DBNames ", " }}
	) VALUES (
		{{ $inputColumnsParams }}
	) RETURNING id`

	query, args := util.PgMapQuery(stmt, map[string]interface{}{
        {{- range $inputColumns}}
        "{{ printf "{%s}" (camel .DBName | specialId) }}": {{ printf "input.%s" .Name  }} ,
        {{- end }}
	})

	return c.Invoke(ctx, func(db *sqlx.Tx) (er error) {
		var id flake.ID
		if er = db.GetContext(ctx, &id, query, args...);er != nil{
			return
		}

		newCtx := dbconn.WithDB(ctx, db)
		er = c.Get(newCtx, id, output)
		return
	})
}

// Update {{pascal .Table.DBName}}Model by id
// TODO: 删除本行表示您已确认下方func已完成
func(c *{{camel .Table.DBName}})Update(ctx context.Context, id flake.ID, input *{{ $table }}.{{pascal .Table.DBName}}Input, output interface{})error{
	stmt := `
	UPDATE {{ $table }} SET (
		{{ join $inputColumns.DBNames ", " }}, updated_at
	) = (
		{{ $inputColumnsParams }}, CURRENT_TIMESTAMP
	) WHERE 
		{{join .Table.PrimaryKeys.DBNames ", "}} = {{ $PKFieldsParams }}
	RETURNING id`

	query, args := util.PgMapQuery(stmt, map[string]interface{}{
		"{id}": id,
        {{- range $inputColumns}}
        "{{ printf "{%s}" (camel .DBName | specialId) }}": {{ printf "input.%s" .Name  }} ,
        {{- end }}
	})

	return c.Invoke(ctx, func(db *sqlx.Tx) (er error) {
		var id flake.ID
		if er = db.GetContext(ctx, &id, query, args...);er != nil{
			return
		}

		newCtx := dbconn.WithDB(ctx, db)
		er = c.Get(newCtx, enterpriseId, id, output)
		return
	})
}

// Delete {{pascal .Table.DBName}}Model by id
// TODO: 删除本行表示您已确认下方func已完成
func(c *{{camel .Table.DBName}})Delete(ctx context.Context, id flake.ID, output interface{})error{
	stmt := "UPDATE {{ $table }} SET deleted = true, updated_at = CURRENT_TIMESTAMP WHERE id = ${id} RETURNING id"

	query, args := util.PgMapQuery(stmt, map[string]interface{}{
        "{id}": id,
	})
	return c.Invoke(ctx, func(db *sqlx.Tx) (er error) {
		var id flake.ID
		if er = db.GetContext(ctx, &id, query, args...);er != nil{
			return
		}

		newCtx := dbconn.WithDB(ctx, db)
		er = c.Get(newCtx, id, output)
        return
	})
}

// Restore {{pascal .Table.DBName}}Model by id
// TODO: 删除本行表示您已确认下方func已完成
func(c *{{camel .Table.DBName}})Restore(ctx context.Context, id flake.ID, output interface{})error{
	stmt := "UPDATE {{ $table }} SET deleted = false, updated_at = CURRENT_TIMESTAMP WHERE id = ${id} RETURNING id"

	query, args := util.PgMapQuery(stmt, map[string]interface{}{
        "{id}": id,
	})
	return c.Invoke(ctx, func(db *sqlx.Tx) (er error) {
		var id flake.ID
		if er = db.GetContext(ctx, &id, query, args...);er != nil{
			return
		}

		newCtx := dbconn.WithDB(ctx, db)
		er = c.Get(newCtx, enterpriseId, id, output)
        return
	})
}

// Delete {{pascal .Table.DBName}}Model by id
// TODO: 删除本行表示您已确认下方func已完成
func(c *{{camel .Table.DBName}})Delete(ctx context.Context, id flake.ID)error{
	stmt := "DELETE FROM {{ $table }} WHERE id = ${id}"

	query, args := util.PgMapQuery(stmt, map[string]interface{}{
        "{id}": id,
	})
	return c.Invoke(ctx, func(db dbconn.Q) error {
		_, err := db.ExecContext(ctx, query, args...) // nolint: errcheck
        return err
	})
}

// TODO: 删除本行表示您已确认下方func已完成
func(c *{{camel .Table.DBName}})Query(ctx context.Context, m interface{}, plan *dbquery.Plan) (total int,err error) {
	filterSql := `
	FROM {{ $table }} t
	WHERE 1=1` + plan.Conditions 

	if plan.RetTotal {
		query := `SELECT count(DISTINCT t.id) ` + filterSql
		query, args := util.PgMapQueryV2(query, plan.Params)
		
		err = c.Invoke(ctx, func(db dbconn.Q) error {
			return db.GetContext(ctx, &total, query, args...)
		})
		if err != nil {
			return
		}
	}

	query := `
	WITH res AS (
		SELECT t.* 
		`+ filterSql +`
		`+ plan.OrderBySql +`
		`+ plan.LimitSql +`
	)
	SELECT
		COALESCE(json_agg(r.*), '[]'::json)
	FROM res r`
	query, args := util.PgMapQueryV2(query, plan.Params)
	
	err = c.Invoke(ctx, func(db dbconn.Q) error {
		return db.GetContext(ctx, &util.PgJsonScanWrap{m}, query, args...)
	})
	return
}

// TODO: 删除本行表示您已确认下方func已完成
func(c *{{camel .Table.DBName}})Exists(ctx context.Context, id flake.ID) (exists bool, err error) {
	stmt := "SELECT EXISTS(SELECT 1 FROM {{ $table }} WHERE id = ${id} AND deleted = false)" // TODO: 删除本TODO表示您已确认deleted字段存在情况

	query, args := util.PgMapQuery(stmt, map[string]interface{}{
		"{id}":           id,
	})
	err = c.Invoke(ctx, func(db dbconn.Q) error {
		return db.GetContext(ctx, &exists, query, args...)
	})
	return
}



// ------------------------------
// Filter
// ------------------------------

package {{ $table }}

import (
	"net/http"

	"github.com/teapots/params"
	"github.com/teapots/teapot"
	"pkg.jimu.io/libs/sdk/auth/access"
)

// TODO: 删除本行表示您已确认下方func已完成
func Filter(ctx teapot.Context, log teapot.ReqLogger, rw http.ResponseWriter, req *http.Request, param *params.Params, acRes *access.AccessCheckResult) error {
	for name, _ := range param.Route.Values {
		switch name {
			// TODO
		default:
			panic("FUCK!! I forgot it.")
		}
	}

	return nil
}


//	"cos-backend-com/src/common/flake"
  	"cos-backend-com/src/common/validate"
  	"cos-backend-com/src/cores/routers"
  	"cos-backend-com/src/libs/apierror"
  	"cos-backend-com/src/libs/models/startups"
  	"cos-backend-com/src/libs/sdk/cores"
  	"net/http"

  	"github.com/wujiu2020/strip/utils/apires"
// ------------------------------
// Handler
// ------------------------------
package {{ $table }}

import (
	"net/http"

	"cos-backend-com/src/libs/apierror"
	"cos-backend-com/src/common/flake"
	"cos-backend-com/src/common/validate"
)

// {{pascal .Table.DBName}}Handler represents handler for '{{ $table }}'.
type {{pascal .Table.DBName}}Handler struct{
	routers.Base
}

// TODO: 删除本行表示您已确认下方func已完成
func(h *{{pascal .Table.DBName}}Handler)List()(res interface{}){
	var params {{ $table }}.List{{pascal .Table.DBName}}Input
	h.Params.BindValuesToStruct(&params)

	if err := validate.Default.Struct(params); err != nil {
		h.Log.Warn(err)
		res = apierror.HandleError(err)
		return
	}

	var output {{ $table }}.List{{pascal .Table.DBName}}Result
	total, err := models.{{pascal .Table.DBName}}.List(h.Ctx, &params, &output.Result)
	if err != nil{
		h.Log.Warn(err)
		res = apierror.HandleError(err)
		return
	}
	output.Total = total

	res = apires.With(&output, http.StatusOK)
	return
}

// TODO: 删除本行表示您已确认下方func已完成
func(h *{{pascal .Table.DBName}}Handler)Create()(res interface{}){
	var input {{ $table }}.{{pascal .Table.DBName}}Input
	if err := h.Params.BindJsonBody(&input); err != nil {
		h.Log.Warn(err)
		res = apierror.ErrBadRequest.WithData(err)
		return
	}

	if err := validate.Default.Struct(input); err != nil {
		h.Log.Warn(err)
		res = apierror.HandleError(err)
		return
	}

	var output {{ $table }}.{{pascal .Table.DBName}}Result
	if err := models.{{pascal .Table.DBName}}.Create(h.Ctx, &input, &output); err != nil {
		h.Log.Warn(err)
		res = apierror.HandleError(err)
		return
	}

	res = apires.With(&output, http.StatusCreated)
	return
}

// TODO: 删除本行表示您已确认下方func已完成
func(h *{{pascal .Table.DBName}}Handler)Get(id flake.ID)(res interface{}){
	var output {{ $table }}.{{pascal .Table.DBName}}Result
	if err := models.{{pascal .Table.DBName}}.Get(h.Ctx,  id, &output); err != nil {
		h.Log.Warn(err)
		res = apierror.HandleError(err)
		return
	}

	res = apires.With(&output, http.StatusOK)
	return
}

// TODO: 删除本行表示您已确认下方func已完成
func(h *{{pascal .Table.DBName}}Handler)Update(id flake.ID)(res interface{}){
	var input {{ $table }}.{{pascal .Table.DBName}}Input
	if err := h.Params.BindJsonBody(&input); err != nil {
		h.Log.Warn(err)
		res = apierror.ErrBadRequest.WithData(err)
		return
	}

	if err := validate.Default.Struct(input); err != nil {
		h.Log.Warn(err)
		res = apierror.HandleError(err)
		return
	}

	var output {{ $table }}.{{pascal .Table.DBName}}Result
	if err := models.{{pascal .Table.DBName}}.Update(h.Ctx, id, &input, &output); err != nil {
		h.Log.Warn(err)
		res = apierror.HandleError(err)
		return
	}

	res = apires.With(&output, http.StatusOK)
	return
}

// TODO: 删除本行表示您已确认下方func已完成
func(h *{{pascal .Table.DBName}}Handler)Delete(id flake.ID)(res interface{}){
	var output {{ $table }}.{{pascal .Table.DBName}}Result
	if err := models.{{pascal .Table.DBName}}.Delete(h.Ctx, id, &output); err != nil {
		h.Log.Warn(err)
		res = apierror.HandleError(err)
		return
	}

	res = apires.With(&output, http.StatusOK)
	return
}

// TODO: 删除本行表示您已确认下方func已完成
func(h *{{pascal .Table.DBName}}Handler)Restore(id flake.ID)(res interface{}){
	var output {{ $table }}.{{pascal .Table.DBName}}Result
	if err := models.{{pascal .Table.DBName}}.Restore(h.Ctx, id, &output); err != nil {
		h.Log.Warn(err)
		res = apierror.HandleError(err)
		return
	}

	res = apires.With(&output, http.StatusOK)
	return
}

// TODO: 删除本行表示您已确认下方func已完成
func(h *{{pascal .Table.DBName}}Handler)Delete(id flake.ID)(res interface{}){
	if err := models.{{pascal .Table.DBName}}.Delete(h.Ctx, id); err != nil {
		h.Log.Warn(err)
		res = apierror.HandleError(err)
		return
	}

	res = apires.Ret(http.StatusOK)
	return
}
